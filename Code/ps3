#include <Ps3Controller.h>
#include <BluetoothSerial.h>

// Motor driver pins
#define PWM_L1 14
#define DIR_L1 27
#define PWM_R1 26
#define DIR_R1 25
#define PWM_L2 33
#define DIR_L2 32
#define PWM_R2 23
#define DIR_R2 22

BluetoothSerial SerialBT; // Bluetooth Serial object for ESP32

// Function to set motor speed and direction
void controlMotor(int pwmChannel, int dirPin, int speed) {
    speed = constrain(speed, -255, 255); // Constrain speed to valid range
    if (speed > 0) {
        digitalWrite(dirPin, HIGH);
        ledcWrite(pwmChannel, speed);
    } else if (speed < 0) {
        digitalWrite(dirPin, LOW);
        ledcWrite(pwmChannel, -speed);
    } else {
        ledcWrite(pwmChannel, 0); // Stop motor
    }
}

// Callback for PS3 connection
void onConnect() {
    Serial.println("PS3 Controller connected!");
}

void setup() {
    Serial.begin(115200);

    // Initialize motor driver pins
    pinMode(PWM_L1, OUTPUT);
    pinMode(DIR_L1, OUTPUT);
    pinMode(PWM_R1, OUTPUT);
    pinMode(DIR_R1, OUTPUT);
    pinMode(PWM_L2, OUTPUT);
    pinMode(DIR_L2, OUTPUT);
    pinMode(PWM_R2, OUTPUT);
    pinMode(DIR_R2, OUTPUT);

    // Setup PWM channels
    ledcSetup(0, 20000, 8); // 20kHz PWM, 8-bit resolution
    ledcAttachPin(PWM_L1, 0);
    ledcSetup(1, 20000, 8);
    ledcAttachPin(PWM_R1, 1);
    ledcSetup(2, 20000, 8);
    ledcAttachPin(PWM_L2, 2);
    ledcSetup(3, 20000, 8);
    ledcAttachPin(PWM_R2, 3);

    // Initialize Bluetooth
    if (!SerialBT.begin("Just Won")) { // Bluetooth device name
        Serial.println("An error occurred initializing Bluetooth.");
    } else {
        Serial.println("Bluetooth initialized successfully.");
    }

    // Initialize PS3 controller
    Ps3Controller ps3Controller;
    ps3Controller.begin();
    ps3Controller.attach(onConnect); // Attach callback for connection
}

void loop() {
    Ps3Controller ps3Controller;
    if (ps3Controller.isConnected()) {
        // Get right joystick values
        int rightStickX = ps3Controller.data.analog.stick.rx - 128; // Centered at 0
        int rightStickY = ps3Controller.data.analog.stick.ry - 128; // Centered at 0

        // Dead zone to avoid jitter
        if (abs(rightStickX) < 10) rightStickX = 0;
        if (abs(rightStickY) < 10) rightStickY = 0;

        // Calculate motor speeds based on joystick positions
        int motorSpeedLeft = map(rightStickY, -128, 128, -255, 255);
        int motorSpeedRight = map(rightStickY, -128, 128, -255, 255);

        // Adjust for X-axis (left/right movement)
        if (rightStickX > 10) { // Right
            motorSpeedLeft -= rightStickX;
            motorSpeedRight += rightStickX;
        } else if (rightStickX < -10) { // Left
            motorSpeedLeft += -rightStickX;
            motorSpeedRight -= -rightStickX;
        }

        // Adjust for Y-axis (forward/backward movement)
        if (rightStickY > 10) { // Forward
            motorSpeedLeft += rightStickY;
            motorSpeedRight += rightStickY;
        } else if (rightStickY < -10) { // Backward
            motorSpeedLeft -= -rightStickY;
            motorSpeedRight -= -rightStickY;
        }

        // Apply motor speed to all four motors
        controlMotor(0, DIR_L1, motorSpeedLeft);  // Left motor 1
        controlMotor(1, DIR_R1, motorSpeedRight); // Right motor 1
        controlMotor(2, DIR_L2, motorSpeedLeft);  // Left motor 2
        controlMotor(3, DIR_R2, motorSpeedRight); // Right motor 2
    } else {
        // Stop motors if controller is disconnected
        controlMotor(0, DIR_L1, 0);
        controlMotor(1, DIR_R1, 0);
        controlMotor(2, DIR_L2, 0);
        controlMotor(3, DIR_R2, 0);
    }
}
